course, course_text
COMP1511, "This course is an introductory course into the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include: Fundamental programming concepts Introduction to Computer Science The C programming language and use of a C compiler Programming style Program design and organisation concepts Program testing and debugging Before commencing this course, students should: Have basic computer literacy (not necessarily have programmed before) Otherwise COMP1511 assumes no background knowledge. This course aims for students to become proficient in a high level programming language, C. It also focuses on mental preparedness for programming long term, including problem solving, debugging and testing. After completing this course, students will: Have basic proficiency with the C programming language Have the ability to analyse a problem and solve it using programming Have learnt some techniques for debugging and testing code and programs Understand how to use basic data structures like arrays and linked lists be able to use the basics of a Linux-like, command line driven operating system"
COMP1523, "This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems and network infrastructure, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems. Assumed Knowledge Before commencing this course, students should be able to ... write simple programs in the C programming language define and invoke functions and return results in C define and manipulate structured data in C use pointers to access data objects These are assumed to have been acquired in COMP1511 or COMP1911. Learning Outcomes After completing this course, students will be able to ... Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards Describe the principles of memory management and explain the workings of a system with virtual memory management Explain how the major components of a CPU work together, including how data and instructions are represented in a computer Design, implement, and analyse small programs at the assembly/machine level Describe the relationship between a high-level procedural language ( C) and assembly (machine language) which implements it including how a compiled program is executed in a classical von Neumann machine Explain how input/output operations are implemented, and describe some basic I/O devices Describe the components comprising, and the services offered by, an operating system Implement simple programs involving communication and concurrency This course contributes to the development of the following graduate capabilities: Graduate Capability Acquired in scholarship: understanding of their discipline in its interdisciplinary context lectures, assignments scholarship: capable of independent and collaborative enquiry lab work, assignments scholarship: rigorous in their analysis, critique, and reflection tutorials scholarship: able to apply their knowledge and skills to solving problems tutorials, lab work, assignments scholarship: ethical practitioners all course-work, by doing it yourself scholarship: capable of effective communication blog, tutorials scholarship: digitally literate everywhere in CSE leadership: enterprising, innovative and creative assignments leadership: collaborative team workers lab work, assignments professionalism: capable of operating within an agreed Code of Practice all prac work Teaching Strategies and Rationale This course uses the standard set of practice-focussed teaching strategies employed by most CSE foundational courses: Lectures … introduce concepts, show examples Tutorials … reinforce concepts and provide additional examples Lab Work … provide examples of using various technologies Assignments … allow you to solve larger problems Having said that, the second half of the course is more discursive than other CSE foundational courses. This course is taught the way it is because it aims to give a broad view of many topics in computer systems, to provide a foundation for further study in later systems-related courses. At the same time, it provides further practice in developing software, but at a level closer to the machine than other foundational courses. Lectures Lectures will be used to present the theory and practice of the techniques and tools in this course. The lectures will include practical demonstrations of various technologies. Lecture notes will be available on the course web pages before each lecture. All lectures will be online-only. We plan to use broadcast lectures using, simultaneously, YouTube Live and Teams live events. Question are welcome via Teams (not YouTube) chat. Recording of all lectures will be made available. Lectures may be pre-recorded on some topics. About 20 minutes prior to each lecture, the class will be emailed links via course forum announcement, which will allow you to join the live lecture. Tutorials Tutorials and laboratory classes will run weeks 1-5 and 7-10. Tutorials and laboratory classes will be offered online using Blackboard Collaborate. You will be emailed links for your particularly class.. You will also able to optionally attend face-to-face tutorials and laboratory classes some weeks. The procedures for this will be explained in the lectures. You can complete tutorials and laboratory classes entirely online if you wish. From week 1, you will also be expected to participate a one-hour tutorial session to clarify ideas from lectures and work through exercises based on the lecture material. You should make sure that you use them effectively by examining in advance the material to be covered in each week's tutorial, by asking questions, by offering suggestions, and by generally participating. The tutorial questions will be posted on the Web in the week before each tutorial. There are no marks for tutorial participation. Laboratory Classes Following the tutorial class each week, there will be a two-hour laboratory class, during which you will work on a variety of small practical problems involving the tools introduced in lectures. Because this course has a significant practical component, laboratory classes are important. If you do not put a good amount of effort into the lab classes, you risk failing the final exam. Each week, there will be one or more exercises to work on. These exercises will be released in the week preceding the lab class. During the lab, your tutor will provide feedback on your approach to the problem and on the style of your solution. Some labs may contain exercises which will be assessed during the lab. Completed exercises need to be submitted. You must submit exercises before the deadline using give to obtain a mark for a lab exercise, The usual lab exercise submission deadline will be 17:59 Sunday some lab exercises may have an extended deadline The lab exercises for each week are worth in total 2 marks. All of your lab marks will be summed to give you a mark out of 18; if their sum exceeds 15, your total mark will be capped at 15. Most labs include one or more challenge exercises. Challenge exercises may involve concepts not covered in lectures and they range in difficulty from not-very-hard to almost-impossible. The contribution of challenge exercises to lab marks will be limited to 20% Hence you can obtain almost full marks (95+%) for the lab component without completing challenge exercises. If you wish to obtained a high mark for COMP1521 attempting some challenge exercises is highly recommended. If your goal is just to master the core material and pass COMP1521, you can ignore challenge exercises. Assignments There are two assessable programming assignments. Assignments give you the chance to practice what you have learnt on relatively large problems (compared to the small exercises in the labs). Assignments are a very important part of this course, therefore it is essential that you attempt them yourself. Assignment 1, on Assembly programming (MIPS); due Week 7; worth 15% Assignment 2, on System programming; due Week 10; worth 15% Late assignments submissions will be penalised. The exact penalty will be specified in the assignment specification: often, it is a 1% reduction in the maximum achievable mark for every hour late. Weekly Tests There will be weekly tests from weeks 3–10 designed to give you timely and realistic feedback of your understanding of the course material. Tests may be programming exercises, multiple choice questions, or both. These will be conducted in your own time under self-enforced exam-like conditions. Each test will specify the conditions, but typically these will include: no assistance permitted from any person; a time limit; no access to materials (written or online) except specified language documentation or man pages. Each test is worth 1.7 marks, and will be automarked. Your total mark for the tests component is computed as a sum of your best 6 of 8 test marks. Any violation of the test conditions will result in a mark of zero for the entire test component. Final Exam There will be an online exam which students completely remotely (from home). This will be centrally timetabled, and appear in your UNSW exam timetable. During this exam you will be able to execute, debug and test your answers to implementation tasks which will be similar to those encountered in lab exercises and weekly tests. There is a hurdle requirement on the final exam. If you do not score at least 40% (18.0/45) on the exam (after scaling), you cannot pass this course. If your overall course score exceeds 50%, despite scoring very poorly (<40%) on the exam, the hurdle will be enforced via a grade of UF. Student Conduct and Academic Integrity Student Conduct The Student Code of Conduct (Information, Policy) sets out what the University expects from students as members of the UNSW community. As well as the learning, teaching and research environment, the University aims to provide an environment that enables students to achieve their full potential and to provide an experience consistent with the University's values and guiding principles. A condition of enrolment is that students inform themselves of the University's rules and policies affecting them, and conduct themselves accordingly. Students have the responsibility to observe standards of equity and respect in dealing with every member of the University community. This applies to all activities on UNSW premises and all external activities related to study and research. This includes behaviour in person as well as behaviour on social media: for example, in Facebook groups set up for the purpose of discussing UNSW courses or course work. Behaviour that is considered in breach of the Student Code Policy as discriminatory, sexually inappropriate, bullying, harassing, invading another's privacy, or causing any person to fear for their personal safety is serious misconduct, and can lead to severe penalties, including suspension or exclusion. If you have any concerns, you may raise them with your lecturer, or approach the School Ethics Officer, Grievance Officer, or one of the student representatives. Academic Integrity UNSW has an ongoing commitment to fostering a culture of learning informed by academic integrity. All UNSW staff and students have a responsibility to adhere to this principle of academic integrity. Plagiarism is defined as using the words or ideas of others and presenting them as your own. Plagiarism undermines academic integrity, and is not tolerated at UNSW. Instances of plagiarism are treated by UNSW and CSE as acts of academic misconduct, which carry penalties as severe as being excluded from further study at UNSW. There are several on-line resources to help you understand what plagiarism is and how it is dealt with at UNSW. Plagiarism and Academic Integrity UNSW Plagiarism Procedure Make sure that you read and understand these. Ignorance is not accepted as an excuse for plagiarism. In particular, at CSE you are responsible for ensuring that your assignment files are not accessible by anyone but you by setting correct permissions in your CSE home directory and for any code repositories you may use. Note also that plagiarism includes paying or asking another person to do a piece of work for you, and then submitting it as your own work. The pages below describe the policies and procedures in more detail: Student Code Policy Student Misconduct Procedure Plagiarism Policy Statement Plagiarism Procedure You should also read the following page which describes your rights and responsibilities in the CSE context: Essential Advice for CSE Students Assessment Item Topics Due Marks LOs Tests all topics Weeks 3-10 10 1-9 Assignment 1 Assembly programming (MIPS) Week 7 15 4 Assignment 2 System programming Week 10 15 2,5 Labs all topics Week 1-10 15 1-5,9 Final Exam all topics exam period 45 1-9 Your final mark for this course will be computed using the above assessments as follows: CourseWorkMark = TestMark + LabMark + Ass1Mark + Ass2Mark out of 55 ExamMark out of 45 ExamOK = ExamMark ≥ 18.0/45 true/false FinalMark = CourseWorkMark + ExamMark out of 100 FinalGrade = UF, if ! ExamOK && FinalMark ≥ 50 FL, if FinalMark < 50/100 PS, if 50/100 ≤ FinalMark < 65/100 CR, if 65/100 ≤ FinalMark < 75/100 DN, if 75/100 ≤ FinalMark < 85/100 HD, if FinalMark ≥ 85/100 Course Schedule The following is a rough schedule of when topics will be covered. This will most likely change over the session as topics take more or less time to cover. Week Lectures Tut/Lab Assigns Tests 1 course intro, bit manipulation, integer representation C revision - - 2 floating-point representation bit manipulation & integers - - 3 instruction set architecture, assembly language (MIPS) programming (i) bit manipulation & floats - test 1 4 assembly language (MIPS) programming (ii) assembly language (MIPS) programming - flow of control - test 2 5 assembly language (MIPS) programming (iii) assembly language (MIPS) programming - memory operations - test 3 (due week 7) 6 flexibility week - - test 4 (due week 7) 7 assembly language (MIPS) programming (iv), system calls, file operations assembly language (MIPS) programming - fucntion & the stack ass1 due test 5 8 file metadata & file systems manipulating files - test 6 9 virtual memory, processes, signals manipulating file metadata and directories - test 7 10 parallelism, synchronisation, coordination, communication virtual Memory ass2 due test 8 Resources for Students There is no single text book that covers all of the material in this course at the right level of detail and using the same technology base as we are. The lecture notes should provide sufficient detail to introduce topics, and you will then study them in further depth in the tutes, labs and assignments. There are also many online resources available, and we will provide links to the most useful ones. Some are listed below. If you find others, please post links in the Comments section on the Course Outline page. The following is a Recommended Reading for this course: Computer Systems: A Programmer's Perspective, by Randal E. Bryant and David R. O'Hallaron; Prentice-Hall (web site) There are copies in the UNSW Bookstore and in the library. It covers many of the topics in the course, but uses a different machine architecture (i.e., not MIPS). Some suggestions for other books that cover at least some of the topics in this course: Introduction to Computer Systems: From Bits and Gates to C and Beyond, by Yale N. Patt and Sanjay J. Patel; McGraw Hill The Elements of Computing Systems: Building a Modern Computer from First Principles, by Noam Nisan and Shimon Schocken; MIT Press (web site, including lecture slides) Documentation for the various systems used in the course is linked from the course website. Course Evaluation and Development This course has previously run in 17s2, 18s1, 18s2, 19T2, 19T3 and 20T2. The course will be evaluated at the end of the session using the myExperience system. However, you are encouraged to provide informal feedback during the session, and to let course staff know of any problems as soon as they arise. Suggestions will be listened to openly, positively, constructively, and thankfully, and every reasonable effort will be made to address them. Before commencing this course, students should be able to ... write simple programs in the C programming language define and invoke functions and return results in C define and manipulate structured data in C use pointers to access data objects These are assumed to have been acquired in COMP1511 or COMP1911. Learning Outcomes After completing this course, students will be able to ... Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards Describe the principles of memory management and explain the workings of a system with virtual memory management Explain how the major components of a CPU work together, including how data and instructions are represented in a computer Design, implement, and analyse small programs at the assembly/machine level Describe the relationship between a high-level procedural language ( C) and assembly (machine language) which implements it including how a compiled program is executed in a classical von Neumann machine Explain how input/output operations are implemented, and describe some basic I/O devices Describe the components comprising, and the services offered by, an operating system Implement simple programs involving communication and concurrency This course contributes to the development of the following graduate capabilities: Graduate Capability Acquired in scholarship: understanding of their discipline in its interdisciplinary context lectures, assignments scholarship: capable of independent and collaborative enquiry lab work, assignments scholarship: rigorous in their analysis, critique, and reflection tutorials scholarship: able to apply their knowledge and skills to solving problems tutorials, lab work, assignments scholarship: ethical practitioners all course-work, by doing it yourself scholarship: capable of effective communication blog, tutorials scholarship: digitally literate everywhere in CSE leadership: enterprising, innovative and creative assignments leadership: collaborative team workers lab work, assignments professionalism: capable of operating within an agreed Code of Practice all prac work Teaching Strategies and Rationale This course uses the standard set of practice-focussed teaching strategies employed by most CSE foundational courses: Lectures … introduce concepts, show examples Tutorials … reinforce concepts and provide additional examples Lab Work … provide examples of using various technologies Assignments … allow you to solve larger problems Having said that, the second half of the course is more discursive than other CSE foundational courses. This course is taught the way it is because it aims to give a broad view of many topics in computer systems, to provide a foundation for further study in later systems-related courses. At the same time, it provides further practice in developing software, but at a level closer to the machine than other foundational courses. Lectures Lectures will be used to present the theory and practice of the techniques and tools in this course. The lectures will include practical demonstrations of various technologies. Lecture notes will be available on the course web pages before each lecture. All lectures will be online-only. We plan to use broadcast lectures using, simultaneously, YouTube Live and Teams live events. Question are welcome via Teams (not YouTube) chat. Recording of all lectures will be made available. Lectures may be pre-recorded on some topics. About 20 minutes prior to each lecture, the class will be emailed links via course forum announcement, which will allow you to join the live lecture. Tutorials Tutorials and laboratory classes will run weeks 1-5 and 7-10. Tutorials and laboratory classes will be offered online using Blackboard Collaborate. You will be emailed links for your particularly class.. You will also able to optionally attend face-to-face tutorials and laboratory classes some weeks. The procedures for this will be explained in the lectures. You can complete tutorials and laboratory classes entirely online if you wish. From week 1, you will also be expected to participate a one-hour tutorial session to clarify ideas from lectures and work through exercises based on the lecture material. You should make sure that you use them effectively by examining in advance the material to be covered in each week's tutorial, by asking questions, by offering suggestions, and by generally participating. The tutorial questions will be posted on the Web in the week before each tutorial. There are no marks for tutorial participation. Laboratory Classes Following the tutorial class each week, there will be a two-hour laboratory class, during which you will work on a variety of small practical problems involving the tools introduced in lectures. Because this course has a significant practical component, laboratory classes are important. If you do not put a good amount of effort into the lab classes, you risk failing the final exam. Each week, there will be one or more exercises to work on. These exercises will be released in the week preceding the lab class. During the lab, your tutor will provide feedback on your approach to the problem and on the style of your solution. Some labs may contain exercises which will be assessed during the lab. Completed exercises need to be submitted. You must submit exercises before the deadline using give to obtain a mark for a lab exercise, The usual lab exercise submission deadline will be 17:59 Sunday some lab exercises may have an extended deadline The lab exercises for each week are worth in total 2 marks. All of your lab marks will be summed to give you a mark out of 18; if their sum exceeds 15, your total mark will be capped at 15. Most labs include one or more challenge exercises. Challenge exercises may involve concepts not covered in lectures and they range in difficulty from not-very-hard to almost-impossible. The contribution of challenge exercises to lab marks will be limited to 20% Hence you can obtain almost full marks (95+%) for the lab component without completing challenge exercises. If you wish to obtained a high mark for COMP1521 attempting some challenge exercises is highly recommended. If your goal is just to master the core material and pass COMP1521, you can ignore challenge exercises. Assignments There are two assessable programming assignments. Assignments give you the chance to practice what you have learnt on relatively large problems (compared to the small exercises in the labs). Assignments are a very important part of this course, therefore it is essential that you attempt them yourself. Assignment 1, on Assembly programming (MIPS); due Week 7; worth 15% Assignment 2, on System programming; due Week 10; worth 15% Late assignments submissions will be penalised. The exact penalty will be specified in the assignment specification: often, it is a 1% reduction in the maximum achievable mark for every hour late. Weekly Tests There will be weekly tests from weeks 3–10 designed to give you timely and realistic feedback of your understanding of the course material. Tests may be programming exercises, multiple choice questions, or both. These will be conducted in your own time under self-enforced exam-like conditions. Each test will specify the conditions, but typically these will include: no assistance permitted from any person; a time limit; no access to materials (written or online) except specified language documentation or man pages. Each test is worth 1.7 marks, and will be automarked. Your total mark for the tests component is computed as a sum of your best 6 of 8 test marks. Any violation of the test conditions will result in a mark of zero for the entire test component. Final Exam There will be an online exam which students completely remotely (from home). This will be centrally timetabled, and appear in your UNSW exam timetable. During this exam you will be able to execute, debug and test your answers to implementation tasks which will be similar to those encountered in lab exercises and weekly tests. There is a hurdle requirement on the final exam. If you do not score at least 40% (18.0/45) on the exam (after scaling), you cannot pass this course. If your overall course score exceeds 50%, despite scoring very poorly (<40%) on the exam, the hurdle will be enforced via a grade of UF. Student Conduct and Academic Integrity Student Conduct The Student Code of Conduct (Information, Policy) sets out what the University expects from students as members of the UNSW community. As well as the learning, teaching and research environment, the University aims to provide an environment that enables students to achieve their full potential and to provide an experience consistent with the University's values and guiding principles. A condition of enrolment is that students inform themselves of the University's rules and policies affecting them, and conduct themselves accordingly. Students have the responsibility to observe standards of equity and respect in dealing with every member of the University community. This applies to all activities on UNSW premises and all external activities related to study and research. This includes behaviour in person as well as behaviour on social media: for example, in Facebook groups set up for the purpose of discussing UNSW courses or course work. Behaviour that is considered in breach of the Student Code Policy as discriminatory, sexually inappropriate, bullying, harassing, invading another's privacy, or causing any person to fear for their personal safety is serious misconduct, and can lead to severe penalties, including suspension or exclusion. If you have any concerns, you may raise them with your lecturer, or approach the School Ethics Officer, Grievance Officer, or one of the student representatives. Academic Integrity UNSW has an ongoing commitment to fostering a culture of learning informed by academic integrity. All UNSW staff and students have a responsibility to adhere to this principle of academic integrity. Plagiarism is defined as using the words or ideas of others and presenting them as your own. Plagiarism undermines academic integrity, and is not tolerated at UNSW. Instances of plagiarism are treated by UNSW and CSE as acts of academic misconduct, which carry penalties as severe as being excluded from further study at UNSW. There are several on-line resources to help you understand what plagiarism is and how it is dealt with at UNSW. Plagiarism and Academic Integrity UNSW Plagiarism Procedure Make sure that you read and understand these. Ignorance is not accepted as an excuse for plagiarism. In particular, at CSE you are responsible for ensuring that your assignment files are not accessible by anyone but you by setting correct permissions in your CSE home directory and for any code repositories you may use. Note also that plagiarism includes paying or asking another person to do a piece of work for you, and then submitting it as your own work. The pages below describe the policies and procedures in more detail: Student Code Policy Student Misconduct Procedure Plagiarism Policy Statement Plagiarism Procedure You should also read the following page which describes your rights and responsibilities in the CSE context: Essential Advice for CSE Students Assessment Item Topics Due Marks LOs Tests all topics Weeks 3-10 10 1-9 Assignment 1 Assembly programming (MIPS) Week 7 15 4 Assignment 2 System programming Week 10 15 2,5 Labs all topics Week 1-10 15 1-5,9 Final Exam all topics exam period 45 1-9 Your final mark for this course will be computed using the above assessments as follows: CourseWorkMark = TestMark + LabMark + Ass1Mark + Ass2Mark out of 55 ExamMark out of 45 ExamOK = ExamMark ≥ 18.0/45 true/false FinalMark = CourseWorkMark + ExamMark out of 100 FinalGrade = UF, if ! ExamOK && FinalMark ≥ 50 FL, if FinalMark < 50/100 PS, if 50/100 ≤ FinalMark < 65/100 CR, if 65/100 ≤ FinalMark < 75/100 DN, if 75/100 ≤ FinalMark < 85/100 HD, if FinalMark ≥ 85/100 Course Schedule The following is a rough schedule of when topics will be covered. This will most likely change over the session as topics take more or less time to cover. Week Lectures Tut/Lab Assigns Tests 1 course intro, bit manipulation, integer representation C revision - - 2 floating-point representation bit manipulation & integers - - 3 instruction set architecture, assembly language (MIPS) programming (i) bit manipulation & floats - test 1 4 assembly language (MIPS) programming (ii) assembly language (MIPS) programming - flow of control - test 2 5 assembly language (MIPS) programming (iii) assembly language (MIPS) programming - memory operations - test 3 (due week 7) 6 flexibility week - - test 4 (due week 7) 7 assembly language (MIPS) programming (iv), system calls, file operations assembly language (MIPS) programming - fucntion & the stack ass1 due test 5 8 file metadata & file systems manipulating files - test 6 9 virtual memory, processes, signals manipulating file metadata and directories - test 7 10 parallelism, synchronisation, coordination, communication virtual Memory ass2 due test 8 Resources for Students There is no single text book that covers all of the material in this course at the right level of detail and using the same technology base as we are. The lecture notes should provide sufficient detail to introduce topics, and you will then study them in further depth in the tutes, labs and assignments. There are also many online resources available, and we will provide links to the most useful ones. Some are listed below. If you find others, please post links in the Comments section on the Course Outline page. The following is a Recommended Reading for this course: Computer Systems: A Programmer's Perspective, by Randal E. Bryant and David R. O'Hallaron; Prentice-Hall (web site) There are copies in the UNSW Bookstore and in the library. It covers many of the topics in the course, but uses a different machine architecture (i.e., not MIPS). Some suggestions for other books that cover at least some of the topics in this course: Introduction to Computer Systems: From Bits and Gates to C and Beyond, by Yale N. Patt and Sanjay J. Patel; McGraw Hill The Elements of Computing Systems: Building a Modern Computer from First Principles, by Noam Nisan and Shimon Schocken; MIT Press (web site, including lecture slides) Documentation for the various systems used in the course is linked from the course website. Course Evaluation and Development This course has previously run in 17s2, 18s1, 18s2, 19T2, 19T3 and 20T2. The course will be evaluated at the end of the session using the myExperience system. However, you are encouraged to provide informal feedback during the session, and to let course staff know of any problems as soon as they arise. Suggestions will be listened to openly, positively, constructively, and thankfully, and every reasonable effort will be made to address them. After completing this course, students will be able to ... Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards Describe the principles of memory management and explain the workings of a system with virtual memory management Explain how the major components of a CPU work together, including how data and instructions are represented in a computer Design, implement, and analyse small programs at the assembly/machine level Describe the relationship between a high-level procedural language ( C) and assembly (machine language) which implements it including how a compiled program is executed in a classical von Neumann machine Explain how input/output operations are implemented, and describe some basic I/O devices Describe the components comprising, and the services offered by, an operating system Implement simple programs involving communication and concurrency This course contributes to the development of the following graduate capabilities: Graduate Capability Acquired in scholarship: understanding of their discipline in its interdisciplinary context lectures, assignments scholarship: capable of independent and collaborative enquiry lab work, assignments scholarship: rigorous in their analysis, critique, and reflection tutorials scholarship: able to apply their knowledge and skills to solving problems tutorials, lab work, assignments scholarship: ethical practitioners all course-work, by doing it yourself scholarship: capable of effective communication blog, tutorials scholarship: digitally literate everywhere in CSE leadership: enterprising, innovative and creative assignments leadership: collaborative team workers lab work, assignments professionalism: capable of operating within an agreed Code of Practice all prac work Teaching Strategies and Rationale This course uses the standard set of practice-focussed teaching strategies employed by most CSE foundational courses: Lectures … introduce concepts, show examples Tutorials … reinforce concepts and provide additional examples Lab Work … provide examples of using various technologies Assignments … allow you to solve larger problems Having said that, the second half of the course is more discursive than other CSE foundational courses. This course is taught the way it is because it aims to give a broad view of many topics in computer systems, to provide a foundation for further study in later systems-related courses. At the same time, it provides further practice in developing software, but at a level closer to the machine than other foundational courses. Lectures Lectures will be used to present the theory and practice of the techniques and tools in this course. The lectures will include practical demonstrations of various technologies. Lecture notes will be available on the course web pages before each lecture. All lectures will be online-only. We plan to use broadcast lectures using, simultaneously, YouTube Live and Teams live events. Question are welcome via Teams (not YouTube) chat. Recording of all lectures will be made available. Lectures may be pre-recorded on some topics. About 20 minutes prior to each lecture, the class will be emailed links via course forum announcement, which will allow you to join the live lecture. Tutorials Tutorials and laboratory classes will run weeks 1-5 and 7-10. Tutorials and laboratory classes will be offered online using Blackboard Collaborate. You will be emailed links for your particularly class.. You will also able to optionally attend face-to-face tutorials and laboratory classes some weeks. The procedures for this will be explained in the lectures. You can complete tutorials and laboratory classes entirely online if you wish. From week 1, you will also be expected to participate a one-hour tutorial session to clarify ideas from lectures and work through exercises based on the lecture material. You should make sure that you use them effectively by examining in advance the material to be covered in each week's tutorial, by asking questions, by offering suggestions, and by generally participating. The tutorial questions will be posted on the Web in the week before each tutorial. There are no marks for tutorial participation. Laboratory Classes Following the tutorial class each week, there will be a two-hour laboratory class, during which you will work on a variety of small practical problems involving the tools introduced in lectures. Because this course has a significant practical component, laboratory classes are important. If you do not put a good amount of effort into the lab classes, you risk failing the final exam. Each week, there will be one or more exercises to work on. These exercises will be released in the week preceding the lab class. During the lab, your tutor will provide feedback on your approach to the problem and on the style of your solution. Some labs may contain exercises which will be assessed during the lab. Completed exercises need to be submitted. You must submit exercises before the deadline using give to obtain a mark for a lab exercise, The usual lab exercise submission deadline will be 17:59 Sunday some lab exercises may have an extended deadline The lab exercises for each week are worth in total 2 marks. All of your lab marks will be summed to give you a mark out of 18; if their sum exceeds 15, your total mark will be capped at 15. Most labs include one or more challenge exercises. Challenge exercises may involve concepts not covered in lectures and they range in difficulty from not-very-hard to almost-impossible. The contribution of challenge exercises to lab marks will be limited to 20% Hence you can obtain almost full marks (95+%) for the lab component without completing challenge exercises. If you wish to obtained a high mark for COMP1521 attempting some challenge exercises is highly recommended. If your goal is just to master the core material and pass COMP1521, you can ignore challenge exercises. Assignments There are two assessable programming assignments. Assignments give you the chance to practice what you have learnt on relatively large problems (compared to the small exercises in the labs). Assignments are a very important part of this course, therefore it is essential that you attempt them yourself. Assignment 1, on Assembly programming (MIPS); due Week 7; worth 15% Assignment 2, on System programming; due Week 10; worth 15% Late assignments submissions will be penalised. The exact penalty will be specified in the assignment specification: often, it is a 1% reduction in the maximum achievable mark for every hour late. Weekly Tests There will be weekly tests from weeks 3–10 designed to give you timely and realistic feedback of your understanding of the course material. Tests may be programming exercises, multiple choice questions, or both. These will be conducted in your own time under self-enforced exam-like conditions. Each test will specify the conditions, but typically these will include: no assistance permitted from any person; a time limit; no access to materials (written or online) except specified language documentation or man pages. Each test is worth 1.7 marks, and will be automarked. Your total mark for the tests component is computed as a sum of your best 6 of 8 test marks. Any violation of the test conditions will result in a mark of zero for the entire test component. Final Exam There will be an online exam which students completely remotely (from home). This will be centrally timetabled, and appear in your UNSW exam timetable. During this exam you will be able to execute, debug and test your answers to implementation tasks which will be similar to those encountered in lab exercises and weekly tests. There is a hurdle requirement on the final exam. If you do not score at least 40% (18.0/45) on the exam (after scaling), you cannot pass this course. If your overall course score exceeds 50%, despite scoring very poorly (<40%) on the exam, the hurdle will be enforced via a grade of UF. Student Conduct and Academic Integrity Student Conduct The Student Code of Conduct (Information, Policy) sets out what the University expects from students as members of the UNSW community. As well as the learning, teaching and research environment, the University aims to provide an environment that enables students to achieve their full potential and to provide an experience consistent with the University's values and guiding principles. A condition of enrolment is that students inform themselves of the University's rules and policies affecting them, and conduct themselves accordingly. Students have the responsibility to observe standards of equity and respect in dealing with every member of the University community. This applies to all activities on UNSW premises and all external activities related to study and research. This includes behaviour in person as well as behaviour on social media: for example, in Facebook groups set up for the purpose of discussing UNSW courses or course work. Behaviour that is considered in breach of the Student Code Policy as discriminatory, sexually inappropriate, bullying, harassing, invading another's privacy, or causing any person to fear for their personal safety is serious misconduct, and can lead to severe penalties, including suspension or exclusion. If you have any concerns, you may raise them with your lecturer, or approach the School Ethics Officer, Grievance Officer, or one of the student representatives. Academic Integrity UNSW has an ongoing commitment to fostering a culture of learning informed by academic integrity. All UNSW staff and students have a responsibility to adhere to this principle of academic integrity. Plagiarism is defined as using the words or ideas of others and presenting them as your own. Plagiarism undermines academic integrity, and is not tolerated at UNSW. Instances of plagiarism are treated by UNSW and CSE as acts of academic misconduct, which carry penalties as severe as being excluded from further study at UNSW. There are several on-line resources to help you understand what plagiarism is and how it is dealt with at UNSW. Plagiarism and Academic Integrity UNSW Plagiarism Procedure Make sure that you read and understand these. Ignorance is not accepted as an excuse for plagiarism. In particular, at CSE you are responsible for ensuring that your assignment files are not accessible by anyone but you by setting correct permissions in your CSE home directory and for any code repositories you may use. Note also that plagiarism includes paying or asking another person to do a piece of work for you, and then submitting it as your own work. The pages below describe the policies and procedures in more detail: Student Code Policy Student Misconduct Procedure Plagiarism Policy Statement Plagiarism Procedure You should also read the following page which describes your rights and responsibilities in the CSE context: Essential Advice for CSE Students Assessment Item Topics Due Marks LOs Tests all topics Weeks 3-10 10 1-9 Assignment 1 Assembly programming (MIPS) Week 7 15 4 Assignment 2 System programming Week 10 15 2,5 Labs all topics Week 1-10 15 1-5,9 Final Exam all topics exam period 45 1-9 Your final mark for this course will be computed using the above assessments as follows: CourseWorkMark = TestMark + LabMark + Ass1Mark + Ass2Mark out of 55 ExamMark out of 45 ExamOK = ExamMark ≥ 18.0/45 true/false FinalMark = CourseWorkMark + ExamMark out of 100 FinalGrade = UF, if ! ExamOK && FinalMark ≥ 50 FL, if FinalMark < 50/100 PS, if 50/100 ≤ FinalMark < 65/100 CR, if 65/100 ≤ FinalMark < 75/100 DN, if 75/100 ≤ FinalMark < 85/100 HD, if FinalMark ≥ 85/100 Course Schedule The following is a rough schedule of when topics will be covered. This will most likely change over the session as topics take more or less time to cover. Week Lectures Tut/Lab Assigns Tests 1 course intro, bit manipulation, integer representation C revision - - 2 floating-point representation bit manipulation & integers - - 3 instruction set architecture, assembly language (MIPS) programming (i) bit manipulation & floats - test 1 4 assembly language (MIPS) programming (ii) assembly language (MIPS) programming - flow of control - test 2 5 assembly language (MIPS) programming (iii) assembly language (MIPS) programming - memory operations - test 3 (due week 7) 6 flexibility week - - test 4 (due week 7) 7 assembly language (MIPS) programming (iv), system calls, file operations assembly language (MIPS) programming - fucntion & the stack ass1 due test 5 8 file metadata & file systems manipulating files - test 6 9 virtual memory, processes, signals manipulating file metadata and directories - test 7 10 parallelism, synchronisation, coordination, communication virtual Memory ass2 due test 8 Resources for Students There is no single text book that covers all of the material in this course at the right level of detail and using the same technology base as we are. The lecture notes should provide sufficient detail to introduce topics, and you will then study them in further depth in the tutes, labs and assignments. There are also many online resources available, and we will provide links to the most useful ones. Some are listed below. If you find others, please post links in the Comments section on the Course Outline page. The following is a Recommended Reading for this course: Computer Systems: A Programmer's Perspective, by Randal E. Bryant and David R. O'Hallaron; Prentice-Hall (web site) There are copies in the UNSW Bookstore and in the library. It covers many of the topics in the course, but uses a different machine architecture (i.e., not MIPS). Some suggestions for other books that cover at least some of the topics in this course: Introduction to Computer Systems: From Bits and Gates to C and Beyond, by Yale N. Patt and Sanjay J. Patel; McGraw Hill The Elements of Computing Systems: Building a Modern Computer from First Principles, by Noam Nisan and Shimon Schocken; MIT Press (web site, including lecture slides) Documentation for the various systems used in the course is linked from the course website. Course Evaluation and Development This course has previously run in 17s2, 18s1, 18s2, 19T2, 19T3 and 20T2. The course will be evaluated at the end of the session using the myExperience system. However, you are encouraged to provide informal feedback during the session, and to let course staff know of any problems as soon as they arise. Suggestions will be listened to openly, positively, constructively, and thankfully, and every reasonable effort will be made to address them."
COMP1531, "We assume all students have completed COMP1511 (or equivalent). Students should be familiar with the basic concepts of programming, including loops, functions, libraries of code, compiling, and writing code to follow specifications. After completing this course, students will be able to: This course uses the standard set of practice-focused teaching strategies employed by most CSE foundational courses: Lectures Tutorials Laboratories Help Sessions Major Group Project Final Exam This course aims to provide the students with a strong foundation in the fundamental principles and practices of software engineering that will prepare them for the advanced software engineering workshops. As such, a broad range of key software engineering topics will be taught and reinforced through a group project, that will enable students to apply the theoretical concepts acquired to solve a practical software engineering problem. An agile software delivery style has been chosen for the implementation of the group project, to make students familiar with modern agile development methodologies."
