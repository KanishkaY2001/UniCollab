courses, courses_text
COMP1531, This course is teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams. The students are exposed to agile software practices team collaboration and effective communication through implementing a group project based on agile software methodologies that requires them to analyse design build and deploy a web-based application. This course is typically taken in the semester after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses. We assume all students have completed COMP1511 (or equivalent). Students should be familiar with the basic concepts of programming including loops functions libraries of code compiling and writing code to follow specifications. After completing this course students will be able to: Demonstrate effective use of applying the python programming language to solve problems in relation to web-based applications. Demonstrate proficiency in use of system schematics data modelling and state modelling to analyse complex software systems. Identify the complexities of software design and development including design smells and common best design practices. Demonstrate effective usage of testing methods (e.g. unit tests integration tests test plan/cases test automation). Understand the software engineering life cycle and agile software development practices to elicit requirements design implement and iterate on software projects. Understand key characteristics of a functioning team both in terms of understanding professional expectations and the use of git as a source code management tool for collaboration.
COMP1511, This course is an introductory course into the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include: Fundamental programming concepts. Introduction to Computer Science. The C programming language and use of a C compiler. Programming style. Program design and organisation concepts. Program testing and debugging. Before commencing this course students should: Have basic computer literacy (not necessarily have programmed before). Otherwise COMP1511 assumes no background knowledge. This course aims for students to become proficient in a high level programming language C. It also focuses on mental preparedness for programming long term including problem solving debugging and testing. After completing this course students will: Have basic proficiency with the C programming language. Have the ability to analyse a problem and solve it using programming. Have learnt some techniques for debugging and testing code and programs. Understand how to use basic data structures like arrays and linked lists be able to use the basics of a Linux-like command line driven operating system
COMP1521, This course introduces students to how computer systems are structured in terms of basic electronic components how they are used to implement procedural programs and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems and network infrastructure and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed as a basis for further study in important areas of computing such as computer architecture operating systems. Before commencing this course students should be able to... write simple programs in the C programming language define and invoke functions and return results in C define and manipulate structured data in C use pointers to access data objects After completing this course students will be able to .. Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards. Describe the principles of memory management and explain the workings of a system with virtual memory management. Explain how the major components of a CPU work together including how data and instructions are represented in a computer. Design implement and analyse small programs at the assembly/machine level. Describe the relationship between a high-level procedural language ( C) and assembly (machine language) which implements it including how a compiled program is executed in a classical von Neumann machine. Explain how input/output operations are implemented and describe some basic I/O devices. Describe the components comprising and the services offered by an operating system. Implement simple programs involving communication and concurrency
SENG2021, This course is part the series of software engineering workshops designed to teach students to work in teams and apply their knowledge to solve real-life problems. This workshop will offer students the opportunity to concentrate on software requirements analysis and design issues including artifacts produced as well techniques and tools to support this process (brainstorming problem statements requirements elicitation producing design documents and prototyping). In addition it aims to provide students with some of teamwork skills requirements engineering and design techniques that an engineer would use in the early stages of the development process. The students will also be getting experience on different aspects of designing a Web application with a major focus on the front-end. The requirements for this course will be determined in collaboration with industry partners and will relate to developing a realistic application. Most of the teaching will be conducted via mentoring of the teams. At the beginning of the course some lectures will give background on some key concepts and technologies and on how to produce artefacts in general. The course has a number of industry sponsors that include Fairfax Media and Macquarie Bank. The Course Learning Outcomes are: • CLO1 explain the principles and processes involved in the early stages (requirements and design) of the software development life cycle • CLO2 apply the use of requirement engineering techniques in a team-based agile development environment • CLO4 apply the use practical software design skills particularly in interface design architectural design and software component integration • CLO5 apply programming skills to implement a prototype Web system that involves choosing appropriate languages libraries and frameworks • CLO6 write reports and documentation for specific needs and pitch a product idea to an audience After completing this course students will: • reinforce existing knowledge about the concepts and principles in the early stages of the software development life cycle • experience with the development of project plans brainstorming requirement documents prototyping techniques issues and tasks management peer reviews • learn about the processes of converting requirements to design in a realistic context • acquire practical design skills particularly in architectural design and software component integration • experience the process of implementing a prototype Web system by choosing appropriate languages libraries and frameworks. • acquire additional skills involved in working as part of a project team working within strict time constraints. • learn the process of writing reports and documentation for specific needs. • the recognition that production of quality software is a task demanding a disciplined approach to all stages of its development • an appreciation of the many and varied issues involved in the development of software systems and the role and the importance that Software Engineering review processes play in producing quality systems • develop an awareness of the community of engineering professions and the importance of keeping current through life-long learning and through interacting with that community. Students will also be encouraged to develop their research skills as one of the means of acquiring the necessary knowledge and skills to solve engineering problems
COMP2521, The aim of this course is to get you to think like a computer scientist. This certainly sounds like a noble goal... but what does it really mean? How does a scientist let alone a computer scientist actually think? What many types of scientists try to do is understand natural systems and processes: a geologist for example tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions and so on. Computer scientists don't as the name might suggest simply try to understand the structure and behaviour of computers but are more concerned with understanding software systems (and the interaction between the software and the hardware on which it runs). Also unlike other scientists computer scientists frequently build the objects that they study. During this course we'll be looking at ways of creating analysing and understanding software. Ultimately you should be able to answer the question is this piece of software any good? and be able to provide sound reasons to justify your answer. This course follows on from introductory C programming courses: COMP1511 COMP1917 or COMP1921. We cover additional aspects of the C programming language that were not covered in those courses and also look at some programming tools which were not covered (in detail) earlier. However this course is not simply a second C programming course: the focus is on the ideas and abstractions behind the data structures and algorithms that are used. COMP2521 is a critical course in the study of computing at UNSW since it deals with many concepts that are central to future studies in the area. Whether you are studying Computer Science Software Engineering Bioinformatics Computer Engineering or even a discipline outside the realm of computing understanding a range of algorithms and data structures and how to use them will make you a much more effective computing problem solver in the future.
COMP2511, COMP 2511 covers the theory and practice of object-oriented design and programming with an emphasis on teaching students how to apply software design principles and design patterns to the building of flexible reusable and maintainable systems. The course also introduces user-interface design and programming and includes the implementation of a large project done in pairs using agile software practices and enables students to have hands-on experience in applying the principles taught implementing and incorporating the use of good design principles and design patterns in software programs. Students are assumed to be: competent C programmers who can understand and use abstract data types understand and know how to use git reasonably be familiar with fundamental object-oriented design concepts This course expects that students have undertaken COMP1531 (a prerequisite for COMP 2511 introduced following a curriculum review 3 years ago) prior to taking this course. COMP1531 introduces use of git and also exposes students to the fundamental principles of software design. However there are a small number of students on the old program who have not taken COMP1531. For these students the week 1 lab is intended to bring them up to speed with git. The following are the intended learning outcomes of this course: Object-Oriented Design Understand the principles of object-oriented design Be able to follow a systematic object-oriented design process Be able to interpret and use tools for object-oriented design Learn how to apply design principles and design patterns effectively to design flexible maintainable and reusable systems Object-Oriented Programming and Java Understand object-oriented programming languages Be able to write medium-scale object-oriented programs in Java Apply systematic methods such as test driven development Understand the importance of documentation and use tools to document software Be able to use an IDE (Interactive Development Environment) for software development Software Processes Understand the importance of team organization and communication Be able to work within a small team in the context of a software development project Be able to plan and execute a software project according a systematic software process User Interfaces Become familiar with principles of effective user interface design Be able to implement a user interface in Java This course contributes to the development of the following graduate capabilities: This course contributes to the following UNSW graduate attributes. An in-depth engagement with the relevant disciplinary knowledge in its interdisciplinary context. The development of systems suitable for different user groups encourages consideration of the users of technology. The capacity for analytical and critical thinking and for creative problem solving. The creation of software applications requires creative approaches to design and implementation and applying best practices. The ability to engage in independent and reflective learning. Software design and implementation must be done independently and students benefit by reflecting on their experiences. The skills required for collaborative and multidisciplinary work. Through a small team project students gain experience in working within a collaborative environment. The skills of effective communication. Through a small team project students develop interpersonal communication skills and presentation and writing skills.