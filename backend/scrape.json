{
    "COMP1531": "This course is teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams. The students are exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that requires them to analyse, design, build and deploy a web-based application. This course is typically taken in the semester after completing COMP1511, but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses. We assume all students have completed COMP1511 (or equivalent). Students should be familiar with the basic concepts of programming, including loops, functions, libraries of code, compiling, and writing code to follow specifications. After completing this course, students will be able to: Demonstrate effective use of applying the python programming language to solve problems in relation to web-based applications. Demonstrate proficiency in use of system schematics, data modelling, and state modelling, to analyse complex software systems. Identify the complexities of software design and development, including design smells and common best design practices. Demonstrate effective usage of testing methods (e.g., unit tests, integration tests, test plan/cases, test automation). Understand the software engineering life cycle and agile software development practices, to elicit requirements, design, implement, and iterate on software projects. Understand key characteristics of a functioning team, both in terms of understanding professional expectations, and the use of git as a source code management tool for collaboration.",
    "COMP1511": "This course is an introductory course into the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include: Fundamental programming concepts. Introduction to Computer Science. The C programming language and use of a C compiler. Programming style. Program design and organisation concepts. Program testing and debugging. Before commencing this course, students should: Have basic computer literacy (not necessarily have programmed before). Otherwise COMP1511 assumes no background knowledge. This course aims for students to become proficient in a high level programming language, C. It also focuses on mental preparedness for programming long term, including problem solving, debugging and testing. After completing this course, students will: Have basic proficiency with the C programming language. Have the ability to analyse a problem and solve it using programming. Have learnt some techniques for debugging and testing code and programs. Understand how to use basic data structures like arrays and linked lists be able to use the basics of a Linux-like, command line driven operating system",
    "COMP1521": "This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems and network infrastructure, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems. Before commencing this course, students should be able to... write simple programs in the C programming language define and invoke functions and return results in C define and manipulate structured data in C use pointers to access data objects After completing this course, students will be able to .. Describe the architectural layers (fundamental parts) of a modern computer systems from hardware device (chip) levels upwards. Describe the principles of memory management and explain the workings of a system with virtual memory management. Explain how the major components of a CPU work together, including how data and instructions are represented in a computer. Design, implement, and analyse small programs at the assembly/machine level. Describe the relationship between a high-level procedural language ( C) and assembly (machine language) which implements it including how a compiled program is executed in a classical von Neumann machine. Explain how input/output operations are implemented, and describe some basic I/O devices. Describe the components comprising, and the services offered by, an operating system. Implement simple programs involving communication and concurrency"
}